import Head from 'next/head'
import { useRouter } from 'next/router'
import { Inter } from '@next/font/google'
import { Container, Paper, Typography, styled, TextField, MenuItem, Box, Button, Backdrop, CircularProgress } from '@mui/material'
import axiosClient from '../functions/fetch'
import { useEffect, useState } from 'react'
import { AxiosResponse } from 'axios'

const inter = Inter({ subsets: ['latin'] })

const ContentWrapper = styled(Paper)({
  backdropColor: '#fff',
  width: '100%',
  maxWidth: 800,
  minHeight: '80vh',
  padding: 20,
  margin: '0 auto',
})

const Title = styled('h1')({
  textAlign: 'center'
})

const FormWrapper = styled(Box)({
  marginTop: '60px',
  maxWidth: '500px',
  marginLeft: 'auto',
  marginRight: 'auto',
})

const FormItemWrapper = styled(Box)({
  marginBottom: 30,
  width: '100%',
  display: 'flex',
  alignItems: 'center'
})

const FormTextLabel = styled('span')({
  display: 'block',
  minWidth: '7em'
})

const FormItem = styled(TextField)({
  fontSize: 24
})

const ButtonWrapper = styled(Box)({
  display: 'flex',
  justifyContent: 'center',
  marginTop: 60,
})

const SendCoinButton = styled(Button)({
  backgroundColor: '#f08300',
  color: '#fff',
  fontWeight: 'bold',
  borderRadius: 8,
  fontSize: 24,
})

const ContentsModal = styled(Backdrop)({
  color: '#fff',
  zIndex: 2,
})

export default function Home() {
  
  let cookieAccountBlock
  let  cookieAccountValue
  const router = useRouter()

  if (typeof document !== 'undefined') {
    cookieAccountBlock = document.cookie.split('; ').find(i => i.startsWith('account'))
    cookieAccountValue= cookieAccountBlock ? cookieAccountBlock.split('=')[1] : ''

    if(cookieAccountValue === '') {
      router.push('/login.html')
    }
  }

  const user = cookieAccountValue || ''

  //トランザクション項目を整形して返す
  const getTransactionItem = (tx:any) => {
    const data = tx.payload.reducedPayload.commandsList[0]
    const created = tx.payload.reducedPayload.createdTime
    
    if(data.transferAsset) {
      const {amount, description, destAccountId, srcAccountId} = data.transferAsset
      return {
       datetime: new Date(created).toLocaleString(),
       action: `${srcAccountId}さんから${destAccountId}さんに${amount}コインが送付されました`,
       message: description
      }
    } else {
      return undefined
    }
  }

  const sendCoin = () => {
    setStatus('sending')
    try {
      axiosClient.post(`/coin/transfer`, {
        account_from: id,
        account_to: sendTo + '@tci',
        amount: sendAmount,
        message: sendLabel + ' ' +sendMessage,
      })
      .then((res: AxiosResponse) => {
        console.log('---コイン送信---')
        console.log(res)
        if(res.status === 200) {
          Promise.resolve(res.data)
        } else {
          Promise.reject('コインの送信に失敗しました')
        }
      })
      .then(() => {
        setStatus('')
        alert('コインの送信に成功しました')
        setSendTo('')
        setSendAmount('')
        setSendLabel('')
        setSendMessage('')
        //↓後で修正する
        setCoinBalance(coinBalance - Number(sendAmount))
      })
      .catch((err) => {
        setStatus('')
        alert(`コインの送信に失敗しました: ${err}`)
        throw err
      })
    } catch (err) {
      alert(`コインの送信に失敗: ${err}`)
    }
  }

  useEffect(() => {
    try {
      //ユーザデータ
      axiosClient.get(`/user?account=${user}`)
      .then((res: AxiosResponse) => {
        const accountId = res.data[0].accountId
        const coinBalance = res.data[1][0].balance
        const userData = JSON.parse(res.data[0].jsonData)[accountId]
        setId(accountId)
        setCoinBalance(coinBalance)
        setName(userData.name)
        setEmail(userData.email)
        console.log(res.data)
      })
      .catch((err) => {
        throw err
      })

      //コイン情報
      axiosClient.get(`/tx?account=${user}`)
      .then((res: AxiosResponse) => {
        console.log(res.data[0])
        setTransactions(res.data[0].transactionsList)
      })
      .catch((err) => {
        throw err
      })

    } catch (err) {
      alert(`データ読み込み失敗: ${err}`)
    }
  }, [])

  //ユーザ情報
  const [id, setId] = useState('')
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [coinBalance, setCoinBalance] = useState(0)
  const [transactions, setTransactions] = useState([])

  //coinを送るときの情報
  const [sendTo, setSendTo] = useState('')
  const [sendAmount, setSendAmount] = useState('')
  const [sendLabel, setSendLabel] = useState('')
  const [sendMessage, setSendMessage] = useState('')

  const [status, setStatus] = useState('')

  return (
    <>
      <Head>
        <title>home | wancoin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <ContentsModal open={!(status === '')}>
          { status === 'sending' ? <Typography>コインを送信しています...</Typography> : undefined }
          <CircularProgress color="inherit" />
        </ContentsModal>
        <Container>
          <ContentWrapper>
            <Title>ようこそ、{name}さん</Title>
            <h2>ユーザー情報</h2>
            <Typography>ユーザID: {id.split('@')[0]}</Typography>
            <Typography>Eメール: {email}</Typography>
            <Typography>コイン: {Number(coinBalance).toLocaleString()}</Typography>
            <Typography>もらったコイン: yyy</Typography>
            <Typography>あげたコイン: xxx</Typography>
            <h2>やり取り履歴</h2>
              {transactions ?
                <ul>
                  {transactions.map((tx, i) => {
                    const data = getTransactionItem(tx)
                    return (data ?
                    <li>
                      <Typography fontSize={12} sx={{fontWeight: 'bold'}}>{data.datetime} : {data.action}</Typography>
                      <Typography fontSize={12}>{data.message}</Typography>
                    </li>
                    : undefined)
                  })}
                </ul>
              : undefined }
            <h2>コインを送る</h2>
            <FormWrapper>
              <FormItemWrapper>
                <FormTextLabel>送る相手</FormTextLabel>
                <FormItem id="sendTo" required label="※必須" variant="filled" select defaultValue="" fullWidth value={sendTo} onChange={(ev) => { setSendTo(ev.target.value) }}>
                  <MenuItem key={1} value="999081">田中直人(999081)</MenuItem>
                  <MenuItem key={2} value="999082">佐藤浩一(999082)</MenuItem>
                  <MenuItem key={3} value="999084">島田直哉(999084)</MenuItem>
                  <MenuItem key={4} value="999085">遠藤圭一(999085)</MenuItem>
                </FormItem>
              </FormItemWrapper>
              <FormItemWrapper>
                <FormTextLabel>送る量</FormTextLabel>
                <FormItem id="sendAmount" required label="※必須" variant="filled" type="number" fullWidth value={sendAmount} onChange={(ev) => { setSendAmount(Number(ev.target.value) > 0 ? ev.target.value : '0')
                  }} />
              </FormItemWrapper>
              <FormItemWrapper>
                <FormTextLabel>ラベル</FormTextLabel>
                <FormItem id="sendLabel" label="必須" variant="filled" select defaultValue="" fullWidth value={sendLabel} onChange={(ev) => { setSendLabel(ev.target.value) }}>
                  <MenuItem key={1} value="#感謝">#感謝</MenuItem>
                  <MenuItem key={2} value="#DM マフィア">#DM マフィア</MenuItem>
                  <MenuItem key={3} value="#Our Styles">#Our Styles</MenuItem>
                </FormItem>
              </FormItemWrapper>
              <FormItemWrapper>
                <FormTextLabel>メッセージ</FormTextLabel>
                <FormItem id="sendLabel" label="任意" variant="filled" type="text" fullWidth value={sendMessage} onChange={(ev) => { setSendMessage(ev.target.value) }} />
              </FormItemWrapper>
            </FormWrapper>
            <ButtonWrapper>
              <SendCoinButton size="large" color="warning" variant="contained" onClick={sendCoin}>
                コインを送る
              </SendCoinButton>
            </ButtonWrapper>
          </ContentWrapper>
        </Container>
      </main>
    </>
  )
}
